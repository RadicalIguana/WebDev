/* 
-------------------------------------------------
|              Основы GraphQL                   |
-------------------------------------------------

Составляющие:
    1. Схемы
        Это письменное представление данных и взаимодействий. Обеспечивает
        соблюдение строгого плана API, потому что API может возвращать данные
        и выполнять действия, которые определены в рамках этой схемы.

        Основополягающим компонентом являются типы объектов.
        Тип GraphQL-объекта Query с полем hello, который возвращает скалярный
        тип String.

        Скалярные типы:
        1) String
            Строка с кодировкой UTF-8
        2) Boolean
            Значение true или false
        3) Int
            32-битное целое число
        4) Float
            Значение с плавающей точкой
        5) ID
            Уникальный идентификатор

        Построение схемы для API:
         type Pizza {  // Начинать нужно с определения типа
            id: ID!     // Уникальный ID
            size: String!  // Размер
            slices: Int!   // Количество ломтиков
            toppings: [String]  // Дополнительные начинки
         }                      // Определить поле, которое требует 
                                   ввод значений можем с помощью 
                                   восклицательного знака

    2. Распознаватели
        Они распознают данные, запрошенные пользователем API.
            Типы распознователей:
                1) Запросы
                    С помощью них мы запрашиваем от API определенные данные
                    в желаемом формате. Запрос никогда не изменяет данные, 
                    а только обращается к ним.
                2) Мутации
                    Мутацию используют, когда хотят изменить данные в API.
                    Как и запрос, мутация возвращает данные в форму объекта,
                    представленного, как правило, конечным результатом 
                    выполненного действия.



-------------------------------------------------
|                 База данных                   |
|                 MongoDB                       |
-------------------------------------------------

БД позволяет нам сохранять и впроследствии извлекать нужную информацию.

Mongo хранит данные в "документах", которые работают аналогично JS-объектам. 
use /название/ - создание бд.
В MongoDB все разделяется по коллекциям. Коллекция - это то, как мы 
группируем схожие документы вместе. Например, приложение-блог может иметь
отдельные коллекции для постов, пользователей и комментариев.
         collection: {
             document: {},
             document: {},
             document: {},
             ...
         }

    db.pizza.save( [ { type: ... }, { type: ... } ] ) - создание коллекции pizza
    с записями.
Методы MongoDB:
    .save() - создание коллекции с записями
    .find() - метод, чтобы увидеть все документы коллекции
    .update(a, b) - метод принимает в качестве первого параметра документ для
    внесения изменения, а в качестве второго - само изменение.
    .remove() - удаление документа


         Подключение MongoDB к приложению

Для подключения используем ODM Mongoose. Mongoose - библиотека, которая
сокращает и оптимизирует рутинный код посредством моделирования на основе
схем.

1.Обновляем .env добавив URL локальной бд
    URL локального сервера MongoDB по умолчанию: mongodb://localhost:27017
    DB_HOST = mongodb://localhost:27017/notedly 
    
2. В db.js подключаем бд к приложению

        


-------------------------------------------------
|                 Операции CRUD                 |
-------------------------------------------------








*/